#version 330 core
// Light 
uniform vec3 u_l_direction; 
uniform vec3 u_l_halfplane; 
uniform vec4 u_l_ambient; 
uniform vec4 u_l_diffuse; 
uniform vec4 u_l_specular; 
 
// Material 
uniform vec4 u_m_ambient; 
uniform vec4 u_m_diffuse; 
uniform vec4 u_m_specular; 
uniform float u_m_shininess; 

// Matrices 
uniform mat4 u_mvmatrix; 
uniform mat4 u_mvpmatrix; 
 
//textureflag
uniform bool u_textured = false;

// Attributes 
attribute vec4 a_position; 
attribute vec3 a_normal;
attribute vec2 a_uv; 

// Varyings 
varying vec4 v_colour;
varying vec4 ambientLight;
varying vec4 diffuseLight;
varying vec4 specularLight;

// texture if maped
uniform sampler2D ourTexture;

// screen effect
uniform int u_effect;

//out bool textured;
out vec2 TexCoord;

void main()  
{ 
	//textured = u_textured;
	TexCoord = a_uv;
	// Calculate and normalise eye space normal 
	vec3 ecNormal=vec3(u_mvmatrix*vec4(a_normal, 0.0)); 
	ecNormal=ecNormal/length(ecNormal); 
 
	// Do light calculations 
	float ndotl=max(0.0, dot(ecNormal, u_l_direction)); 
	float ndoth=max(0.0, dot(ecNormal, u_l_halfplane));
	specularLight=vec4(0.0);
	if (u_textured)
	{
		// Ambient light 
		ambientLight=u_l_ambient*texture(ourTexture, TexCoord); 
 
		// Diffuse light 
		diffuseLight=ndotl*u_l_diffuse*texture(ourTexture, TexCoord); 
 
		// Specular light 
		if (ndoth>0.0)  
			specularLight=pow(ndoth, u_m_shininess)*u_l_specular*texture(ourTexture, TexCoord);   
	}
	else
	{
		// Ambient light 
		ambientLight=u_l_ambient*u_m_ambient; 
 
		// Diffuse light 
		diffuseLight=ndotl*u_l_diffuse*u_m_diffuse; 
 
		// Specular light 
		if (ndoth>0.0)  
			specularLight=pow(ndoth, u_m_shininess)*u_l_specular*u_m_specular;  
	}
	v_colour=ambientLight+diffuseLight+specularLight;
	gl_Position=u_mvpmatrix*a_position; 
} 
