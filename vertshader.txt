// Light 
uniform vec3 u_l_direction; 
uniform vec3 u_l_halfplane; 
uniform vec4 u_l_ambient; 
uniform vec4 u_l_diffuse; 
uniform vec4 u_l_specular; 
 
// Material 
uniform vec4 u_m_ambient; 
uniform vec4 u_m_diffuse; 
uniform vec4 u_m_specular; 
uniform float u_m_shininess; 

// texture if maped
uniform sampler2D ourTexture;

// Matrices 
uniform mat4 u_mvmatrix; 
uniform mat4 u_mvpmatrix; 
 
// Attributes 
attribute vec4 a_position; 
attribute vec3 a_normal; 

// Varyings 
varying vec4 v_colour; 
 
void main()  
{ 
	// Calculate and normalise eye space normal 
	vec3 ecNormal=vec3(u_mvmatrix*vec4(a_normal, 0.0)); 
	ecNormal=ecNormal/length(ecNormal); 
 
	// Do light calculations 
	float ndotl=max(0.0, dot(ecNormal, u_l_direction)); 
	float ndoth=max(0.0, dot(ecNormal, u_l_halfplane)); 
 
	// Ambient light 
	vec4 ambientLight=u_l_ambient*u_m_ambient; 
 
	// Diffuse light 
	vec4 diffuseLight=ndotl*u_l_diffuse*u_m_diffuse; 
 
	// Specular light 
	vec4 specularLight=vec4(0.0); 
	if (ndoth>0.0)  
	specularLight=pow(ndoth, u_m_shininess)*u_l_specular*u_m_specular; 
	v_colour=ambientLight+diffuseLight+specularLight; 
	gl_Position=u_mvpmatrix*a_position; 
} 
